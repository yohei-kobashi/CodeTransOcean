{"id": 1200, "Python": "def monkey_coconuts(sailors=5):\n    \"Parameterised the number of sailors using an inner loop including the last mornings case\"    \n    nuts = sailors\n    while True:\n        n0, wakes = nuts, []\n        for sailor in range(sailors + 1):\n            portion, remainder = divmod(n0, sailors)\n            wakes.append((n0, portion, remainder))\n            if portion <= 0 or remainder != (1 if sailor != sailors else 0):\n                nuts += 1\n                break\n            n0 = n0 - portion - remainder\n        else:\n            break\n    return nuts, wakes\n\nif __name__ == \"__main__\":\n    for sailors in [5, 6]:\n        nuts, wake_stats = monkey_coconuts(sailors)\n        print(\"\\nFor %i sailors the initial nut count is %i\" % (sailors, nuts))\n        print(\"On each waking, the nut count, portion taken, and monkeys share are:\\n \", \n              ',\\n  '.join(repr(ws) for ws in wake_stats))\n", "Java": "public class Test {\n\n    static boolean valid(int n, int nuts) {\n        for (int k = n; k != 0; k--, nuts -= 1 + nuts / n)\n            if (nuts % n != 1)\n                return false;\n        return nuts != 0 && (nuts % n == 0);\n    }\n\n    public static void main(String[] args) {\n        int x = 0;\n        for (int n = 2; n < 10; n++) {\n            while (!valid(n, x))\n                x++;\n            System.out.printf(\"%d: %d%n\", n, x);\n        }\n    }\n}\n", "Java_gpt": "Java:\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class MonkeyCoconuts {\n\n    public static void main(String[] args) {\n        for (int sailors : new int[]{5, 6}) {\n            List<Object[]> wakeStats = monkeyCoconuts(sailors);\n            int nuts = (int) wakeStats.get(0)[0];\n            System.out.printf(\"For %d sailors the initial nut count is %d%n\", sailors, nuts);\n            System.out.println(\"On each waking, the nut count, portion taken, and monkeys share are:\");\n            for (Object[] wake : wakeStats) {\n                System.out.printf(\" %d, %d, %d%n\", wake[0], wake[1], wake[2]);\n            }\n            System.out.println();\n        }\n    }\n\n    private static List<Object[]> monkeyCoconuts(int sailors) {\n        int nuts = sailors;\n        List<Object[]> wakeStats = new ArrayList<>();\n        while (true) {\n            int n0 = nuts;\n            List<Integer> wakes = new ArrayList<>();\n            for (int sailor = 0; sailor <= sailors; sailor++) {\n                int portion = n0 / sailors;\n                int remainder = n0 % sailors;\n                wakes.add(n0);\n                wakes.add(portion);\n                wakes.add(remainder);\n                if (portion <= 0 || remainder != (sailor != sailors ? 1 : 0)) {\n                    nuts++;\n                    break;\n                }\n                n0 = n0 - portion - remainder;\n            }\n            if (n0 == nuts) {\n                break;\n            }\n            Object[] wakeArray = wakes.toArray();\n            wakeStats.add(wakeArray);\n        }\n        Object[] nutsArray = new Object[]{nuts};\n        wakeStats.add(0, nutsArray);\n        return wakeStats;\n    }\n\n}"}
{"id": 1154, "Python": "arr = ['apple', 'orange']  \n\ndef setup():\n    println(len(arr))\n", "C": "#include <stdio.h>\n\nint main()\n{    \n    const char *fruit[2] = { \"apples\", \"oranges\" };\n    int length = sizeof(fruit) / sizeof(fruit[0]);\n\n    printf(\"%d\\n\", length);\n\n    return 0;\n}\n", "C_gpt": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nchar *arr[] = {\"apple\", \"orange\"};\n\nvoid setup() {\n    printf(\"%d\\n\", sizeof(arr)/sizeof(arr[0]));\n}\n\nint main() {\n    setup();\n    return 0;\n}"}
{"id": 1153, "Python": "max_it = 13\nmax_it_j = 10\na1 = 1.0\na2 = 0.0\nd1 = 3.2\na = 0.0\n\nprint \" i       d\"\nfor i in range(2, max_it + 1):\n    a = a1 + (a1 - a2) / d1\n    for j in range(1, max_it_j + 1):\n        x = 0.0\n        y = 0.0\n        for k in range(1, (1 << i) + 1):\n            y = 1.0 - 2.0 * y * x\n            x = a - x * x\n        a = a - x / y\n    d = (a1 - a2) / (a - a1)\n    print(\"{0:2d}    {1:.8f}\".format(i, d))\n    d1 = d\n    a2 = a1\n    a1 = a\n", "C++": "#include <iostream>\n\nint main() {\n    const int max_it = 13;\n    const int max_it_j = 10;\n    double a1 = 1.0, a2 = 0.0, d1 = 3.2;\n\n    std::cout << \" i       d\\n\";\n    for (int i = 2; i <= max_it; ++i) {\n        double a = a1 + (a1 - a2) / d1;\n        for (int j = 1; j <= max_it_j; ++j) {\n            double x = 0.0;\n            double y = 0.0;\n            for (int k = 1; k <= 1 << i; ++k) {\n                y = 1.0 - 2.0*y*x;\n                x = a - x * x;\n            }\n            a -= x / y;\n        }\n        double d = (a1 - a2) / (a - a1);\n        printf(\"%2d   Â %.8f\\n\", i, d);\n        d1 = d;\n        a2 = a1;\n        a1 = a;\n    }\n\n    return 0;\n}\n", "C++_gpt": "#include <iostream>\n#include <iomanip>\n#include <cmath>\n\nint main() {\n    int max_it = 13;\n    int max_it_j = 10;\n    double a1 = 1.0;\n    double a2 = 0.0;\n    double d1 = 3.2;\n    double a = 0.0;\n\n    std::cout << \" i       d\" << std::endl;\n    for (int i = 2; i <= max_it; i++) {\n        a = a1 + (a1 - a2) / d1;\n        for (int j = 1; j <= max_it_j; j++) {\n            double x = 0.0;\n            double y = 0.0;\n            for (int k = 1; k <= (1 << i); k++) {\n                y = 1.0 - 2.0 * y * x;\n                x = a - x * x;\n            }\n            a = a - x / y;\n        }\n        double d = (a1 - a2) / (a - a1);\n        std::cout << std::setw(2) << i << \"    \" << std::fixed << std::setprecision(8) << d << std::endl;\n        d1 = d;\n        a2 = a1;\n        a1 = a;\n    }\n    return 0;\n}"}
{"id": 1448, "Python": "def q(n):\n    if n < 1 or type(n) != int: raise ValueError(\"n must be an int >= 1\")\n    try:\n        return q.seq[n]\n    except IndexError:\n        ans = q(n - q(n - 1)) + q(n - q(n - 2))\n        q.seq.append(ans)\n        return ans\nq.seq = [None, 1, 1]\n\nif __name__ == '__main__':\n    first10 = [q(i) for i in range(1,11)]\n    assert first10 == [1, 1, 2, 3, 3, 4, 5, 5, 6, 6], \"Q() value error(s)\"\n    print(\"Q(n) for n = [1..10] is:\", ', '.join(str(i) for i in first10))\n    assert q(1000) == 502, \"Q(1000) value error\"\n    print(\"Q(1000) =\", q(1000))\n", "Go": "package main\n\nimport \"fmt\"\n\nvar m map[int]int\n\nfunc initMap() {\n    m = make(map[int]int)\n    m[1] = 1\n    m[2] = 1\n}\n\nfunc q(n int) (r int) {\n    if r = m[n]; r == 0 {\n        r = q(n-q(n-1)) + q(n-q(n-2))\n        m[n] = r\n    }\n    return\n}\n\nfunc main() {\n    initMap()\n    \n    for n := 1; n <= 10; n++ {\n        showQ(n)\n    }\n    \n    showQ(1000)\n    \n    count, p := 0, 1\n    for n := 2; n <= 1e5; n++ {\n        qn := q(n)\n        if qn < p {\n            count++\n        }\n        p = qn\n    }\n    fmt.Println(\"count:\", count)\n    \n    initMap()\n    showQ(1e6)\n}\n\nfunc showQ(n int) {\n    fmt.Printf(\"Q(%d) = %d\\n\", n, q(n))\n}\n", "Go_gpt": "package main\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n)\n\nvar seq = []int{0, 1, 1}\n\nfunc q(n int) (int, error) {\n\tif n < 1 || n != int(n) {\n\t\treturn 0, errors.New(\"n must be an int >= 1\")\n\t}\n\tif len(seq) > n {\n\t\treturn seq[n], nil\n\t}\n\tfor i := len(seq); i <= n; i++ {\n\t\tans, err1 := q(i - q(i-1))\n\t\tif err1 != nil {\n\t\t\treturn 0, err1\n\t\t}\n\t\tans2, err2 := q(i - q(i-2))\n\t\tif err2 != nil {\n\t\t\treturn 0, err2\n\t\t}\n\t\tseq = append(seq, ans+ans2)\n\t}\n\treturn seq[n], nil\n}\n\nfunc main() {\n\tfirst10 := make([]int, 10)\n\tfor i := 1; i <= 10; i++ {\n\t\tval, err := q(i)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Q() value error(s)\")\n\t\t\treturn\n\t\t}\n\t\tfirst10[i-1] = val\n\t}\n\texpected := []int{1, 1, 2, 3, 3, 4, 5, 5, 6, 6}\n\tfor i := range first10 {\n\t\tif first10[i] != expected[i] {\n\t\t\tfmt.Println(\"Q() value error(s)\")\n\t\t\treturn\n\t\t}\n\t}\n\tfmt.Println(\"Q(n) for n = [1..10] is:\", first10)\n\tval, err := q(1000)\n\tif err != nil {\n\t\tfmt.Println(\"Q(1000) value error\")\n\t\treturn\n\t}\n\tif val != 502 {\n\t\tfmt.Println(\"Q(1000) value error\")\n\t\treturn\n\t}\n\tfmt.Println(\"Q(1000) =\", val)\n}"}
{"id": 286, "Python": "class Node(object):\n     def __init__(self, data = None, prev = None, next = None):\n         self.prev = prev\n         self.next = next\n         self.data = data\n     def __str__(self):\n         return str(self.data)\n     def __repr__(self):\n         return repr(self.data)\n     def iter_forward(self):\n         c = self\n         while c != None:\n             yield c\n             c = c.next\n     def iter_backward(self):\n         c = self\n         while c != None:\n             yield c\n             c = c.prev\n", "C#": "class Link\n{\n    public int Item { get; set; }\n    public Link Prev { get; set; }\n    public Link Next { get; set; }\n\n    \n    public Link(int item, Link prev = null, Link next = null) {\n        Item = item;\n        Prev = prev;\n        Next = next;\n    }\n}\n", "C#_gpt": "class Node {\n    public object data;\n    public Node prev;\n    public Node next;\n    \n    public Node(object data = null, Node prev = null, Node next = null) {\n        this.data = data;\n        this.prev = prev;\n        this.next = next;\n    }\n    \n    public override string ToString() {\n        return data.ToString();\n    }\n    \n    public override string ToString() {\n        return data.ToString();\n    }\n    \n    public IEnumerable<Node> IterForward() {\n        Node c = this;\n        while (c != null) {\n            yield return c;\n            c = c.next;\n        }\n    }\n    \n    public IEnumerable<Node> IterBackward() {\n        Node c = this;\n        while (c != null) {\n            yield return c;\n            c = c.prev;\n        }\n    }\n}"}
{"id": 526, "Python": "def makeList(separator):\n    counter = 1\n\n    def makeItem(item):\n        nonlocal counter\n        result = str(counter) + separator + item + \"\\n\"\n        counter += 1\n        return result\n\n    return makeItem(\"first\") + makeItem(\"second\") + makeItem(\"third\")\n\nprint(makeList(\". \"))\n", "VB": "Option Explicit\n\nPrivate Const Sep As String = \". \"\nPrivate Counter As Integer\nSub Main()\nDim L As Variant\n    Counter = 0\n    L = MakeList(Array(\"first\", \"second\", \"third\"))\n    Debug.Print L\nEnd Sub\nFunction MakeList(Datas) As Variant\nDim i As Integer\n    For i = LBound(Datas) To UBound(Datas)\n        MakeList = MakeList & MakeItem(Datas(i))\n    Next i\nEnd Function\nFunction MakeItem(Item As Variant) As Variant\n    Counter = Counter + 1\n    MakeItem = Counter & Sep & Item & vbCrLf\nEnd Function\n", "VB_gpt": "Function makeList(ByVal separator As String) As String\n    Dim counter As Integer\n    counter = 1\n    \n    Function makeItem(ByVal item As String) As String\n        nonlocal counter\n        Dim result As String\n        result = counter & separator & item & vbCrLf\n        counter = counter + 1\n        makeItem = result\n    End Function\n    \n    makeList = makeItem(\"first\") & makeItem(\"second\") & makeItem(\"third\")\nEnd Function\n\nSub Main()\n    Debug.Print makeList(\". \")\nEnd Sub"}
{"id": 977, "Java": "public static String lcs(String a, String b){\n    int aLen = a.length();\n    int bLen = b.length();\n    if(aLen == 0 || bLen == 0){\n        return \"\";\n    }else if(a.charAt(aLen-1) == b.charAt(bLen-1)){\n        return lcs(a.substring(0,aLen-1),b.substring(0,bLen-1))\n            + a.charAt(aLen-1);\n    }else{\n        String x = lcs(a, b.substring(0,bLen-1));\n        String y = lcs(a.substring(0,aLen-1), b);\n        return (x.length() > y.length()) ? x : y;\n    }\n}\n", "Python": "def lcs(xstr, ystr):\n    \n    if not xstr or not ystr:\n        return \"\"\n    x, xs, y, ys = xstr[0], xstr[1:], ystr[0], ystr[1:]\n    if x == y:\n        return str(lcs(xs, ys)) + x\n    else:\n        return max(lcs(xstr, ys), lcs(xs, ystr), key=len)\n", "Python_gpt": "def lcs(a, b):\n    aLen = len(a)\n    bLen = len(b)\n    if aLen == 0 or bLen == 0:\n        return \"\"\n    elif a[aLen-1] == b[bLen-1]:\n        return lcs(a[:aLen-1], b[:bLen-1]) + a[aLen-1]\n    else:\n        x = lcs(a, b[:bLen-1])\n        y = lcs(a[:aLen-1], b)\n        return x if len(x) > len(y) else y"}
{"id": 413, "Java": "public class FirstPowerOfTwo {\n\n    public static void main(String[] args) {\n        runTest(12, 1);\n        runTest(12, 2);\n        runTest(123, 45);\n        runTest(123, 12345);\n        runTest(123, 678910);\n    }\n    \n    private static void runTest(int l, int n) {\n        System.out.printf(\"p(%d, %d) =Â %,d%n\", l, n, p(l, n));\n    }\n    \n    public static int p(int l, int n) {\n        int test = 0;\n        double log = Math.log(2) / Math.log(10);\n        int factor = 1;\n        int loop = l;\n        while ( loop > 10 ) {\n            factor *= 10;\n            loop /= 10;\n        }\n        while ( n > 0) {\n            test++;\n            int val = (int) (factor * Math.pow(10, test * log % 1));\n            if ( val == l ) {\n                n--;\n            }\n        }\n        return test;\n    }\n    \n}\n", "C": "#include <math.h>\n#include <stdio.h>\n\nint p(int l, int n) {\n    int test = 0;\n    double logv = log(2.0) / log(10.0);\n    int factor = 1;\n    int loop = l;\n    while (loop > 10) {\n        factor *= 10;\n        loop /= 10;\n    }\n    while (n > 0) {\n        int val;\n\n        test++;\n        val = (int)(factor * pow(10.0, fmod(test * logv, 1)));\n        if (val == l) {\n            n--;\n        }\n    }\n    return test;\n}\n\nvoid runTest(int l, int n) {\n    printf(\"p(%d, %d) = %d\\n\", l, n, p(l, n));\n}\n\nint main() {\n    runTest(12, 1);\n    runTest(12, 2);\n    runTest(123, 45);\n    runTest(123, 12345);\n    runTest(123, 678910);\n\n    return 0;\n}\n", "C_gpt": "#include <stdio.h>\n#include <math.h>\n\nvoid runTest(int l, int n);\nint p(int l, int n);\n\nint main() {\n    runTest(12, 1);\n    runTest(12, 2);\n    runTest(123, 45);\n    runTest(123, 12345);\n    runTest(123, 678910);\n    return 0;\n}\n\nvoid runTest(int l, int n) {\n    printf(\"p(%d, %d) = %d\\n\", l, n, p(l, n));\n}\n\nint p(int l, int n) {\n    int test = 0;\n    double logVal = log10(2);\n    int factor = 1;\n    int loop = l;\n    while ( loop > 10 ) {\n        factor *= 10;\n        loop /= 10;\n    }\n    while ( n > 0) {\n        test++;\n        int val = (int) (factor * pow(10, fmod(test * logVal, 1)));\n        if ( val == l ) {\n            n--;\n        }\n    }\n    return test;\n}"}
{"id": 784, "Java": "import java.math.BigInteger;\nimport java.util.*;\nimport static java.util.Arrays.asList;\nimport static java.util.stream.Collectors.toList;\nimport static java.util.stream.IntStream.range;\nimport static java.lang.Math.min;\n\npublic class Test {\n\n    static List<BigInteger> cumu(int n) {\n        List<List<BigInteger>> cache = new ArrayList<>();\n        cache.add(asList(BigInteger.ONE));\n\n        for (int L = cache.size(); L < n + 1; L++) {\n            List<BigInteger> r = new ArrayList<>();\n            r.add(BigInteger.ZERO);\n            for (int x = 1; x < L + 1; x++)\n                r.add(r.get(r.size() - 1).add(cache.get(L - x).get(min(x, L - x))));\n            cache.add(r);\n        }\n        return cache.get(n);\n    }\n\n    static List<BigInteger> row(int n) {\n        List<BigInteger> r = cumu(n);\n        return range(0, n).mapToObj(i -> r.get(i + 1).subtract(r.get(i)))\n                .collect(toList());\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"Rows:\");\n        for (int x = 1; x < 11; x++)\n            System.out.printf(\"%2d: %s%n\", x, row(x));\n\n        System.out.println(\"\\nSums:\");\n        for (int x : new int[]{23, 123, 1234}) {\n            List<BigInteger> c = cumu(x);\n            System.out.printf(\"%s %s%n\", x, c.get(c.size() - 1));\n        }\n    }\n}\n", "C++": "#include <gmpxx.h>\nint N{123456};\nmpz_class hyp[N-3];\nconst mpz_class G(const int n,const int g){return g>n?0:(g==1 or n-g<2)?1:hyp[n-g-2];};\nvoid G_hyp(const int n){for(int i=0;i<N-2*n-1;i++) n==1?hyp[n-1+i]=1+G(i+n+1,n+1):hyp[n-1+i]+=G(i+n+1,n+1);}\n}\n", "C++_gpt": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <numeric>\n#include <cmath>\n#include <string>\n#include <sstream>\n#include <iterator>\n#include <functional>\n#include <array>\n#include <list>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <bitset>\n#include <unordered_map>\n#include <unordered_set>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <climits>\n#include <cctype>\n#include <cassert>\n#include <iomanip>\n#include <random>\n#include <chrono>\n#include <complex>\n#include <valarray>\n\nusing namespace std;\nusing ll = long long;\nusing ull = unsigned long long;\nusing ld = long double;\nusing pii = pair<int, int>;\nusing pll = pair<ll, ll>;\nusing pdd = pair<double, double>;\n\n#define rep(i, n) for (int i = 0; i < (n); ++i)\n#define rep1(i, n) for (int i = 1; i <= (n); ++i)\n#define rrep(i, n) for (int i = (n)-1; i >= 0; --i)\n#define rrep1(i, n) for (int i = (n); i >= 1; --i)\n#define all(c) begin(c), end(c)\n#define sz(c) int((c).size())\n#define pb push_back\n#define fs first\n#define sc second\n#define chmax(x, y) x = max(x, y)\n#define chmin(x, y) x = min(x, y)\n#define print(x) cout << (x) << '\\n'\n#define debug(x) cerr << #x << \": \" << (x) << '\\n'\n#define pcnt __builtin_popcount\n#define pcntl __builtin_popcountll\n#define UNIQUE(v) v.erase(unique(v.begin(), v.end()), v.end())\n\ntemplate<class T> bool chmax(T& a, const T& b) { if (a < b) { a = b; return 1; } return 0; }\ntemplate<class T> bool chmin(T& a, const T& b) { if (a > b) { a = b; return 1; } return 0; }\ntemplate<class T> using reversed_priority_queue = priority_queue<T, vector<T>, greater<T>>;\n\nconst int INF = 1e9;\nconst ll LINF = 1e18;\nconst int MOD = 1e9 + 7;\n\nvector<BigInteger> cumu(int n) {\n    vector<vector<BigInteger>> cache;\n    cache.push_back({BigInteger(1)});\n\n    for (int L = cache.size(); L < n + 1; L++) {\n        vector<BigInteger> r;\n        r.push_back(BigInteger(0));\n        for (int x = 1; x < L + 1; x++)\n            r.push_back(r.back() + cache[L - x][min(x, L - x)]);\n        cache.push_back(r);\n    }\n    return cache[n];\n}\n\nvector<BigInteger> row(int n) {\n    vector<BigInteger> r = cumu(n);\n    vector<BigInteger> res;\n    for (int i = 0; i < n; i++) {\n        res.push_back(r[i + 1] - r[i]);\n    }\n    return res;\n}\n\nint main() {\n    cout << \"Rows:\" << endl;\n    for (int x = 1; x < 11; x++) {\n        cout << setw(2) << x << \": \";\n        vector<BigInteger> r = row(x);\n        for (int i = 0; i < sz(r); i++) {\n            cout << r[i] << \" \";\n        }\n        cout << endl;\n    }\n\n    cout << \"\\nSums:\" << endl;\n    for (int x : {23, 123, 1234}) {\n        vector<BigInteger> c = cumu(x);\n        cout << x << \" \" << c.back() << endl;\n    }\n    return 0;\n}"}
{"id": 524, "Java": "import java.util.Random;\n\nRandom rand = new Random();\nwhile(true){\n    int a = rand.nextInt(20);\n    System.out.println(a);\n    if(a == 10) break;\n    int b = rand.nextInt(20);\n    System.out.println(b);\n}\n", "Go": "package main\n\nimport \"fmt\"\nimport \"math/rand\"\nimport \"time\"\n\nfunc main() {\n    rand.Seed(time.Now().UnixNano())\n    for {\n        a := rand.Intn(20)\n        fmt.Println(a)\n        if a == 10 {\n            break\n        }\n        b := rand.Intn(20)\n        fmt.Println(b)\n    }\n}\n", "Go_gpt": "package main\n\nimport (\n    \"fmt\"\n    \"math/rand\"\n    \"time\"\n)\n\nfunc main() {\n    rand.Seed(time.Now().UnixNano())\n    for {\n        a := rand.Intn(20)\n        fmt.Println(a)\n        if a == 10 {\n            break\n        }\n        b := rand.Intn(20)\n        fmt.Println(b)\n    }\n}"}
{"id": 156, "Java": "import java.util.ArrayList;\n...\npublic static void genPyrN(int rows){\n\tif(rows < 0) return;\n\t\n\tArrayList<Integer> last = new ArrayList<Integer>();\n\tlast.add(1);\n\tSystem.out.println(last);\n\tfor(int i= 1;i <= rows;++i){\n\t\t\n\t\tArrayList<Integer> thisRow= new ArrayList<Integer>();\n\t\tthisRow.add(last.get(0)); \n\t\tfor(int j= 1;j < i;++j){\n\t\t\t\n\t\t\tthisRow.add(last.get(j - 1) + last.get(j));\n\t\t}\n\t\tthisRow.add(last.get(0)); \n\t\tlast= thisRow;\n\t\tSystem.out.println(thisRow);\n\t}\n}\n", "C#": "using System;\n\nnamespace RosettaCode {\n\n    class PascalsTriangle {\n\n        public static void CreateTriangle(int n) {\n            if (n > 0) {\n                for (int i = 0; i < n; i++) {\n                    int c = 1;\n                    Console.Write(\" \".PadLeft(2 * (n - 1 - i)));\n                    for (int k = 0; k <= i; k++) {\n                        Console.Write(\"{0}\", c.ToString().PadLeft(3));\n                        c = c * (i - k) / (k + 1);\n                    }\n                    Console.WriteLine();\n                }\n            }\n        }\n\n        public static void Main() {\n            CreateTriangle(8);\n        }\n    }\n}\n", "C#_gpt": "using System;\nusing System.Collections.Generic;\n\npublic class Program {\n    public static void Main(string[] args) {\n        GenPyrN(5);\n    }\n\n    public static void GenPyrN(int rows) {\n        if (rows < 0) return;\n\n        List<int> last = new List<int>();\n        last.Add(1);\n        Console.WriteLine(string.Join(\" \", last));\n        for (int i = 1; i <= rows; ++i) {\n            List<int> thisRow = new List<int>();\n            thisRow.Add(last[0]);\n            for (int j = 1; j < i; ++j) {\n                thisRow.Add(last[j - 1] + last[j]);\n            }\n            thisRow.Add(last[0]);\n            last = thisRow;\n            Console.WriteLine(string.Join(\" \", thisRow));\n        }\n    }\n}"}
{"id": 547, "Java": "public class Narc{\n\tpublic static boolean isNarc(long x){\n\t\tif(x < 0) return false;\n\t\t\n\t\tString xStr = Long.toString(x);\n\t\tint m = xStr.length();\n\t\tlong sum = 0;\n\t\t\n\t\tfor(char c : xStr.toCharArray()){\n\t\t\tsum += Math.pow(Character.digit(c, 10), m);\n\t\t}\n\t\treturn sum == x;\n\t}\n\n\tpublic static void main(String[] args){\n\t\tfor(long x = 0, count = 0; count < 25; x++){\n\t\t\tif(isNarc(x)){\n\t\t\t\tSystem.out.print(x + \" \");\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n}\n", "VB": "Private Function narcissistic(n As Long) As Boolean\n    Dim d As String: d = CStr(n)\n    Dim l As Integer: l = Len(d)\n    Dim sumn As Long: sumn = 0\n    For i = 1 To l\n        sumn = sumn + (Mid(d, i, 1) - \"0\") ^ l\n    Next i\n    narcissistic = sumn = n\nEnd Function\n\nPublic Sub main()\n    Dim s(24) As String\n    Dim n As Long: n = 0\n    Dim found As Integer: found = 0\n    Do While found < 25\n        If narcissistic(n) Then\n            s(found) = CStr(n)\n            found = found + 1\n        End If\n        n = n + 1\n    Loop\n    Debug.Print Join(s, \", \")\nEnd Sub\n", "VB_gpt": "Public Class Narc\n    Public Shared Function IsNarc(ByVal x As Long) As Boolean\n        If x < 0 Then\n            Return False\n        End If\n        \n        Dim xStr As String = x.ToString()\n        Dim m As Integer = xStr.Length\n        Dim sum As Long = 0\n        \n        For Each c As Char In xStr.ToCharArray()\n            sum += Math.Pow(Character.GetNumericValue(c), m)\n        Next\n        \n        Return sum = x\n    End Function\n    \n    Public Shared Sub Main(ByVal args() As String)\n        Dim count As Long = 0\n        Dim x As Long = 0\n        \n        While count < 25\n            If IsNarc(x) Then\n                Console.Write(x & \" \")\n                count += 1\n            End If\n            \n            x += 1\n        End While\n    End Sub\nEnd Class"}
{"id": 1416, "C": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n\n#define LIMIT 6000\n\nchar *primes(unsigned int limit) {\n    char *p = malloc(limit + 1);\n    int i, j, sqr = sqrt(limit);\n    \n    p[0] = p[1] = 0;\n    memset(p+2, 1, limit-1);\n    for (i=2; i<=sqr; i++)\n        if (p[i])\n            for (j=i*2; j<=limit; j+=i)\n                p[j] = 0;\n            \n    return p;\n}\n\nint triplet(const char *p, unsigned int n) {\n    return n >= 2 && p[n-1] && p[n+3] && p[n+5];\n}\n\nint main() {\n    char *p = primes(LIMIT+5);\n    int i;\n    \n    for (i=2; i<LIMIT; i++)\n        if (triplet(p, i))\n            printf(\"%4d: %4d, %4d, %4d\\n\", i, i-1, i+3, i+5);\n    \n    free(p);\n    return 0;\n}\n", "Python": "N = 6000\np = [None] * 6000  \n\nfor i in range(2, round(pow(N,0.5))):\n    if not p[i]:\n        for j in range(i*2, N, i):\n            p[j] = 1\n\n\nfor i in range(3, N):\n    if (p[i-1] or p[i+3] or p[i+5]):\n        continue\n    else:\n        print(i, ': ', i-1,  ' ', i+3,  ' ', i+5)\n", "Python_gpt": "Python:\n\nimport math\n\nLIMIT = 6000\n\ndef primes(limit):\n    p = [True] * (limit + 1)\n    p[0] = p[1] = False\n    sqr = int(math.sqrt(limit))\n    for i in range(2, sqr + 1):\n        if p[i]:\n            for j in range(i * 2, limit + 1, i):\n                p[j] = False\n    return p\n\ndef triplet(p, n):\n    return n >= 2 and p[n-1] and p[n+3] and p[n+5]\n\ndef main():\n    p = primes(LIMIT+5)\n    for i in range(2, LIMIT):\n        if triplet(p, i):\n            print(\"{:4d}: {:4d}, {:4d}, {:4d}\".format(i, i-1, i+3, i+5))\n    return 0\n\nif __name__ == '__main__':\n    main()"}
{"id": 101, "C": "#include <stdlib.h>  \n#include <string.h>  \n#include <strings.h> \n\nint mycmp(const void *s1, const void *s2)\n{\n    const char *l = *(const char **)s1, *r = *(const char **)s2;\n    size_t ll = strlen(l), lr = strlen(r);\n\n    if (ll > lr) return -1;\n    if (ll < lr) return 1;\n    return strcasecmp(l, r);\n}\n\nint main()\n{\n    const char *strings[] = {\n      \"Here\", \"are\", \"some\", \"sample\", \"strings\", \"to\", \"be\", \"sorted\" };\n\n    qsort(strings, sizeof(strings)/sizeof(*strings), sizeof(*strings), mycmp);\n    return 0;\n}\n", "Java": "import java.util.Comparator;\nimport java.util.Arrays;\n\npublic class Test {\n  public static void main(String[] args) {\n    String[] strings = {\"Here\", \"are\", \"some\", \"sample\", \"strings\", \"to\", \"be\", \"sorted\"};\n\n    Arrays.sort(strings, new Comparator<String>() {\n      public int compare(String s1, String s2) {\n        int c = s2.length() - s1.length();\n        if (c == 0)\n          c = s1.compareToIgnoreCase(s2);\n        return c;\n      }\n    });\n\n    for (String s: strings)\n      System.out.print(s + \" \");\n  }\n}\n", "Java_gpt": "import java.util.Arrays;\nimport java.util.Comparator;\n\npublic class Main {\n    public static void main(String[] args) {\n        String[] strings = {\"Here\", \"are\", \"some\", \"sample\", \"strings\", \"to\", \"be\", \"sorted\"};\n        Arrays.sort(strings, new MyComparator());\n        System.out.println(Arrays.toString(strings));\n    }\n\n    static class MyComparator implements Comparator<String> {\n        @Override\n        public int compare(String s1, String s2) {\n            int ll = s1.length(), lr = s2.length();\n            if (ll > lr) return -1;\n            if (ll < lr) return 1;\n            return s1.compareToIgnoreCase(s2);\n        }\n    }\n}"}
{"id": 1054, "C": "#include <stdio.h>\n#include <math.h>\n\nint main() {\n    const int N = 2;\n    int base = 10;\n    int c1 = 0;\n    int c2 = 0;\n    int k;\n\n    for (k = 1; k < pow(base, N); k++) {\n        c1++;\n        if (k % (base - 1) == (k * k) % (base - 1)) {\n            c2++;\n            printf(\"%d \", k);\n        }\n    }\n\n    printf(\"\\nTring %d numbers instead of %d numbers saves %f%%\\n\", c2, c1, 100.0 - 100.0 * c2 / c1);\n    return 0;\n}\n", "CPP": "#include <iostream>\nint main() {\n\tint Base = 10;\n\tconst int N = 2;\n\tint c1 = 0;\n\tint c2 = 0;\n\tfor (int k=1; k<pow((double)Base,N); k++){\n\t\tc1++;\n\t\tif (k%(Base-1) == (k*k)%(Base-1)){\n\t\t\tc2++;\n\t\t\tstd::cout << k << \" \";\n\t\t}\n\t}\n\tstd::cout << \"\\nTrying \" << c2 << \" numbers instead of \" << c1 << \" numbers saves \" << 100 - ((double)c2/c1)*100 << \"%\" <<std::endl;\n\treturn 0;\n}\n", "CPP_gpt": "#include <iostream>\n#include <cmath>\n\nint main() {\n    const int N = 2;\n    int base = 10;\n    int c1 = 0;\n    int c2 = 0;\n    int k;\n\n    for (k = 1; k < pow(base, N); k++) {\n        c1++;\n        if (k % (base - 1) == (k * k) % (base - 1)) {\n            c2++;\n            std::cout << k << \" \";\n        }\n    }\n\n    std::cout << \"\\nTring \" << c2 << \" numbers instead of \" << c1 << \" numbers saves \" << 100.0 - 100.0 * c2 / c1 << \"%\\n\";\n    return 0;\n}"}
{"id": 1258, "C": "#include <stdio.h>\n\nint countDivisors(int n) {\n    int i, count;\n    if (n < 2) return 1;\n    count = 2; \n    for (i = 2; i <= n/2; ++i) {\n        if (n%i == 0) ++count;\n    }\n    return count;\n}\n\nint main() {\n    int n, d, maxDiv = 0, count = 0;\n    printf(\"The first 20 anti-primes are:\\n\");\n    for (n = 1; count < 20; ++n) {\n        d = countDivisors(n); \n        if (d > maxDiv) {\n            printf(\"%d \", n);\n            maxDiv = d;\n            count++;\n        }\n    }\n    printf(\"\\n\"); \n    return 0;\n}\n", "Go": "package main\n\nimport \"fmt\"\n\nfunc countDivisors(n int) int {\n    if n < 2 {\n        return 1\n    }\n    count := 2 \n    for i := 2; i <= n/2; i++ {\n        if n%i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc main() {\n    fmt.Println(\"The first 20 anti-primes are:\")\n    maxDiv := 0\n    count := 0\n    for n := 1; count < 20; n++ {\n        d := countDivisors(n)\n        if d > maxDiv {\n            fmt.Printf(\"%d \", n)\n            maxDiv = d\n            count++\n        }\n    }\n    fmt.Println()\n}\n", "Go_gpt": "package main\n\nimport \"fmt\"\n\nfunc countDivisors(n int) int {\n    if n < 2 {\n        return 1\n    }\n    count := 2\n    for i := 2; i <= n/2; i++ {\n        if n%i == 0 {\n            count++\n        }\n    }\n    return count\n}\n\nfunc main() {\n    n, d, maxDiv, count := 1, 0, 0, 0\n    fmt.Println(\"The first 20 anti-primes are:\")\n    for count < 20 {\n        d = countDivisors(n)\n        if d > maxDiv {\n            fmt.Printf(\"%d \", n)\n            maxDiv = d\n            count++\n        }\n        n++\n    }\n    fmt.Println()\n}"}
{"id": 613, "C": "#include <stdio.h>\n#include <math.h>\n\ndouble rms(double *v, int n)\n{\n  int i;\n  double sum = 0.0;\n  for(i = 0; i < n; i++)\n    sum += v[i] * v[i];\n  return sqrt(sum / n);\n}\n\nint main(void)\n{\n  double v[] = {1., 2., 3., 4., 5., 6., 7., 8., 9., 10.};\n  printf(\"%f\\n\", rms(v, sizeof(v)/sizeof(double)));\n  return 0;\n}\n", "C#": "using System;\n\nnamespace rms\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int[] x = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n            Console.WriteLine(rootMeanSquare(x));\n        }\n\n        private static double rootMeanSquare(int[] x)\n        {            \n            double sum = 0;\n            for (int i = 0; i < x.Length; i++)\n            {\n                sum += (x[i]*x[i]);\n            }\n            return Math.Sqrt(sum / x.Length);\n        }\n    }\n}\n", "C#_gpt": "using System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        double[] v = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0};\n        Console.WriteLine(rms(v, v.Length));\n    }\n    \n    private static double rms(double[] v, int n)\n    {\n        double sum = 0.0;\n        for (int i = 0; i < n; i++)\n        {\n            sum += v[i] * v[i];\n        }\n        return Math.Sqrt(sum / n);\n    }\n}"}
{"id": 566, "C": "#include <stdio.h>\n#include <string.h>\n\nint count_jewels(const char *s, const char *j) {\n    int count = 0;\n    for ( ; *s; ++s) if (strchr(j, *s)) ++count;\n    return count;\n}\n\nint main() {\n    printf(\"%d\\n\", count_jewels(\"aAAbbbb\", \"aA\"));\n    printf(\"%d\\n\", count_jewels(\"ZZ\", \"z\"));\n    return 0;\n}\n", "VB": "Function count_jewels(stones As String, jewels As String) As Integer\n    Dim res As Integer: res = 0\n    For i = 1 To Len(stones)\n        res = res - (InStr(1, jewels, Mid(stones, i, 1), vbBinaryCompare) <> 0)\n    Next i\n    count_jewels = res\nEnd Function\nPublic Sub main()\n    Debug.Print count_jewels(\"aAAbbbb\", \"aA\")\n    Debug.Print count_jewels(\"ZZ\", \"z\")\nEnd Sub\n", "VB_gpt": "Imports System.Runtime.CompilerServices\n\nModule Module1\n\n    Sub Main()\n        Console.WriteLine(count_jewels(\"aAAbbbb\", \"aA\"))\n        Console.WriteLine(count_jewels(\"ZZ\", \"z\"))\n    End Sub\n\n    <Extension()>\n    Function Contains(ByVal str As String, ByVal value As Char) As Boolean\n        Return str.IndexOf(value) >= 0\n    End Function\n\n    Function count_jewels(ByVal s As String, ByVal j As String) As Integer\n        Dim count As Integer = 0\n        For Each c As Char In s\n            If j.Contains(c) Then\n                count += 1\n            End If\n        Next\n        Return count\n    End Function\n\nEnd Module"}
{"id": 1153, "C++": "#include <iostream>\n\nint main() {\n    const int max_it = 13;\n    const int max_it_j = 10;\n    double a1 = 1.0, a2 = 0.0, d1 = 3.2;\n\n    std::cout << \" i       d\\n\";\n    for (int i = 2; i <= max_it; ++i) {\n        double a = a1 + (a1 - a2) / d1;\n        for (int j = 1; j <= max_it_j; ++j) {\n            double x = 0.0;\n            double y = 0.0;\n            for (int k = 1; k <= 1 << i; ++k) {\n                y = 1.0 - 2.0*y*x;\n                x = a - x * x;\n            }\n            a -= x / y;\n        }\n        double d = (a1 - a2) / (a - a1);\n        printf(\"%2d   Â %.8f\\n\", i, d);\n        d1 = d;\n        a2 = a1;\n        a1 = a;\n    }\n\n    return 0;\n}\n", "Python": "max_it = 13\nmax_it_j = 10\na1 = 1.0\na2 = 0.0\nd1 = 3.2\na = 0.0\n\nprint \" i       d\"\nfor i in range(2, max_it + 1):\n    a = a1 + (a1 - a2) / d1\n    for j in range(1, max_it_j + 1):\n        x = 0.0\n        y = 0.0\n        for k in range(1, (1 << i) + 1):\n            y = 1.0 - 2.0 * y * x\n            x = a - x * x\n        a = a - x / y\n    d = (a1 - a2) / (a - a1)\n    print(\"{0:2d}    {1:.8f}\".format(i, d))\n    d1 = d\n    a2 = a1\n    a1 = a\n", "Python_gpt": "# Python equivalent of the C++ code\n\ndef main():\n    max_it = 13\n    max_it_j = 10\n    a1 = 1.0\n    a2 = 0.0\n    d1 = 3.2\n\n    print(\" i       d\")\n    for i in range(2, max_it+1):\n        a = a1 + (a1 - a2) / d1\n        for j in range(1, max_it_j+1):\n            x = 0.0\n            y = 0.0\n            for k in range(1, 1 << i+1):\n                y = 1.0 - 2.0*y*x\n                x = a - x * x\n            a -= x / y\n        d = (a1 - a2) / (a - a1)\n        print(\"{:2d}    {:.8f}\".format(i, d))\n        d1 = d\n        a2 = a1\n        a1 = a\n\nif __name__ == '__main__':\n    main()"}
{"id": 581, "C++": "#include <iostream>\n#include <tuple>\n#include <vector>\n\nusing namespace std;\n\ndouble shoelace(vector<pair<double, double>> points) {\n\tdouble leftSum = 0.0;\n\tdouble rightSum = 0.0;\n\n\tfor (int i = 0; i < points.size(); ++i) {\n\t\tint j = (i + 1) % points.size();\n\t\tleftSum  += points[i].first * points[j].second;\n\t\trightSum += points[j].first * points[i].second;\n\t}\n\n\treturn 0.5 * abs(leftSum - rightSum);\n}\n\nvoid main() {\n\tvector<pair<double, double>> points = {\n\t\tmake_pair( 3,  4),\n\t\tmake_pair( 5, 11),\n\t\tmake_pair(12,  8),\n\t\tmake_pair( 9,  5),\n\t\tmake_pair( 5,  6),\n\t};\n\n\tauto ans = shoelace(points);\n\tcout << ans << endl;\n}\n", "Java": "import java.util.List;\n\npublic class ShoelaceFormula {\n    private static class Point {\n        int x, y;\n\n        Point(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n\n        @Override\n        public String toString() {\n            return String.format(\"(%d, %d)\", x, y);\n        }\n    }\n\n    private static double shoelaceArea(List<Point> v) {\n        int n = v.size();\n        double a = 0.0;\n        for (int i = 0; i < n - 1; i++) {\n            a += v.get(i).x * v.get(i + 1).y - v.get(i + 1).x * v.get(i).y;\n        }\n        return Math.abs(a + v.get(n - 1).x * v.get(0).y - v.get(0).x * v.get(n - 1).y) / 2.0;\n    }\n\n    public static void main(String[] args) {\n        List<Point> v = List.of(\n            new Point(3, 4),\n            new Point(5, 11),\n            new Point(12, 8),\n            new Point(9, 5),\n            new Point(5, 6)\n        );\n        double area = shoelaceArea(v);\n        System.out.printf(\"Given a polygon with vertices %s,%n\", v);\n        System.out.printf(\"its area is %f,%n\", area);\n    }\n}\n", "Java_gpt": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class Shoelace {\n\n    public static void main(String[] args) {\n        List<Pair<Double, Double>> points = new ArrayList<>();\n        points.add(new Pair<>(3.0, 4.0));\n        points.add(new Pair<>(5.0, 11.0));\n        points.add(new Pair<>(12.0, 8.0));\n        points.add(new Pair<>(9.0, 5.0));\n        points.add(new Pair<>(5.0, 6.0));\n\n        double ans = shoelace(points);\n        System.out.println(ans);\n    }\n\n    private static double shoelace(List<Pair<Double, Double>> points) {\n        double leftSum = 0.0;\n        double rightSum = 0.0;\n\n        for (int i = 0; i < points.size(); ++i) {\n            int j = (i + 1) % points.size();\n            leftSum += points.get(i).getKey() * points.get(j).getValue();\n            rightSum += points.get(j).getKey() * points.get(i).getValue();\n        }\n\n        return 0.5 * Math.abs(leftSum - rightSum);\n    }\n\n    private static class Pair<K, V> {\n        private final K key;\n        private final V value;\n\n        public Pair(K key, V value) {\n            this.key = key;\n            this.value = value;\n        }\n\n        public K getKey() {\n            return key;\n        }\n\n        public V getValue() {\n            return value;\n        }\n    }\n}"}
{"id": 861, "C++": "#include <cmath>\n#include <iostream>\n\ndouble vdc(int n, double base = 2)\n{\n    double vdc = 0, denom = 1;\n    while (n)\n    {\n        vdc += fmod(n, base) / (denom *= base);\n        n /= base; \n    }\n    return vdc;\n}\n\nint main() \n{\n    for (double base = 2; base < 6; ++base)\n    {\n        std::cout << \"Base \" << base << \"\\n\";\n        for (int n = 0; n < 10; ++n)\n        {\n            std::cout << vdc(n, base) << \" \";\n        }\n        std::cout << \"\\n\\n\";\n    }\n}\n", "C": "#include <stdio.h>\n\nvoid vc(int n, int base, int *num, int *denom)\n{\n        int p = 0, q = 1;\n\n        while (n) {\n                p = p * base + (n % base);\n                q *= base;\n                n /= base;\n        }\n\n        *num = p;  \n        *denom = q;\n\n        while (p) { n = p; p = q % p; q = n; }\n        *num /= q;\n        *denom /= q;\n}\n\nint main()\n{\n        int d, n, i, b;\n        for (b = 2; b < 6; b++) {\n                printf(\"base %d:\", b);\n                for (i = 0; i < 10; i++) {\n                        vc(i, b, &n, &d);\n                        if (n) printf(\"  %d/%d\", n, d);\n                        else   printf(\"  0\");\n                }\n                printf(\"\\n\");\n        }\n\n        return 0;\n}\n", "C_gpt": "#include <stdio.h>\n#include <math.h>\n\ndouble vdc(int n, double base)\n{\n    double vdc = 0, denom = 1;\n    while (n)\n    {\n        vdc += fmod(n, base) / (denom *= base);\n        n /= base; \n    }\n    return vdc;\n}\n\nint main() \n{\n    for (double base = 2; base < 6; ++base)\n    {\n        printf(\"Base %.0f\\n\", base);\n        for (int n = 0; n < 10; ++n)\n        {\n            printf(\"%f \", vdc(n, base));\n        }\n        printf(\"\\n\\n\");\n    }\n    return 0;\n}"}
{"id": 888, "C++": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <numeric>\n\nint main( ) {\n  std::vector<int> numbers ;\n  for ( int i = 1 ; i < 11 ; i++ )\n    numbers.push_back( i ) ;\n  double meansquare = sqrt( ( std::inner_product( numbers.begin(), numbers.end(), numbers.begin(), 0 ) ) / static_cast<double>( numbers.size() ) );\n  std::cout << \"The quadratic mean of the numbers 1 .. \" << numbers.size() << \" is \" << meansquare << \"Â !\\n\" ;\n  return 0 ;\n}\n", "Go": "package main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc main() {\n    const n = 10\n    sum := 0.\n    for x := 1.; x <= n; x++ {\n        sum += x * x\n    }\n    fmt.Println(math.Sqrt(sum / n))\n}\n", "Go_gpt": "package main\n\nimport (\n    \"fmt\"\n    \"math\"\n)\n\nfunc main() {\n    var numbers []int\n    for i := 1; i < 11; i++ {\n        numbers = append(numbers, i)\n    }\n    var sum int\n    for _, num := range numbers {\n        sum += num * num\n    }\n    meansquare := math.Sqrt(float64(sum) / float64(len(numbers)))\n    fmt.Printf(\"The quadratic mean of the numbers 1 .. %d is %f !\\n\", len(numbers), meansquare)\n}"}
{"id": 217, "C++": "template<typename Number>\n Number power(Number base, int exponent)\n{\n  int zerodir;\n  Number factor;\n  if (exponent < 0)\n  {\n    zerodir = 1;\n    factor = Number(1)/base;\n  }\n  else\n  {\n    zerodir = -1;\n    factor = base;\n  }\n\n  Number result(1);\n  while (exponent != 0)\n  {\n    if (exponent % 2 != 0)\n    {\n      result *= factor;\n      exponent += zerodir;\n    }\n    else\n    {\n      factor *= factor;\n      exponent /= 2;\n    }\n  }\n  return result;\n}\n", "C#": "static void Main(string[] args)\n{\n\tConsole.WriteLine(\"5^5 = \" + Expon(5, 5));\n\tConsole.WriteLine(\"5.5^5 = \" + Expon(5.5, 5));\n\tConsole.ReadLine();\n}\n\nstatic double Expon(int Val, int Pow) \n{\n\treturn Math.Pow(Val, Pow);\n}\nstatic double Expon(double Val, int Pow)\n{\n\treturn Math.Pow(Val, Pow);\n}\n", "C#_gpt": "In C#:\n\npublic static Number Power<Number>(Number baseNumber, int exponent)\n{\n    int zerodir;\n    Number factor;\n    if (exponent < 0)\n    {\n        zerodir = 1;\n        factor = (Number)(Convert.ChangeType(1, typeof(Number))) / baseNumber;\n    }\n    else\n    {\n        zerodir = -1;\n        factor = baseNumber;\n    }\n\n    Number result = (Number)(Convert.ChangeType(1, typeof(Number)));\n    while (exponent != 0)\n    {\n        if (exponent % 2 != 0)\n        {\n            result *= factor;\n            exponent += zerodir;\n        }\n        else\n        {\n            factor *= factor;\n            exponent /= 2;\n        }\n    }\n    return result;\n}"}
{"id": 794, "C++": "#include <algorithm>\n#include <iostream>\n#include <numeric>\n#include <vector>\n\ntemplate <typename T>\nstd::vector<size_t> equilibrium(T first, T last)\n{\n    typedef typename std::iterator_traits<T>::value_type value_t;\n\n    value_t left  = 0;\n    value_t right = std::accumulate(first, last, value_t(0));\n    std::vector<size_t> result;\n\n    for (size_t index = 0; first != last; ++first, ++index)\n    {\n        right -= *first;\n        if (left == right)\n        {\n            result.push_back(index);\n        }\n        left += *first;\n    }\n    return result;\n}\n\ntemplate <typename T>\nvoid print(const T& value)\n{\n    std::cout << value << \"\\n\";\n}\n\nint main() \n{\n    const int data[] = { -7, 1, 5, 2, -4, 3, 0 };\n\n    std::vector<size_t> indices(equilibrium(data, data + 7));\n\n    std::for_each(indices.begin(), indices.end(), print<size_t>);\n}\n", "VB": "arr = Array(-7,1,5,2,-4,3,0)\nWScript.StdOut.Write equilibrium(arr,UBound(arr))\nWScript.StdOut.WriteLine\n\nFunction equilibrium(arr,n)\n\tsum = 0\n\tleftsum = 0\n\t\n\tFor i = 0 To UBound(arr)\n\t\tsum = sum + arr(i)\n\tNext\n\tFor i = 0 To UBound(arr)\n\t\tsum = sum - arr(i)\n\t\tIf leftsum = sum Then\n\t\t\tequilibrium = equilibrium & i & \", \"\n\t\tEnd If\n\t\tleftsum = leftsum + arr(i)\n\tNext\nEnd Function\n", "VB_gpt": "Imports System.Linq\n\nModule Module1\n\n    Function Equilibrium(Of T)(ByVal first As T(), ByVal last As T()) As List(Of Integer)\n        Dim left As T = 0\n        Dim right As T = first.Sum()\n        Dim result As New List(Of Integer)\n\n        For index As Integer = 0 To last - first - 1\n            right -= first(index)\n            If left = right Then\n                result.Add(index)\n            End If\n            left += first(index)\n        Next\n\n        Return result\n    End Function\n\n    Sub Print(Of T)(ByVal value As T)\n        Console.WriteLine(value)\n    End Sub\n\n    Sub Main()\n        Dim data() As Integer = {-7, 1, 5, 2, -4, 3, 0}\n        Dim indices As List(Of Integer) = Equilibrium(data, data + 7)\n\n        indices.ForEach(AddressOf Print(Of Integer))\n    End Sub\n\nEnd Module"}
{"id": 1541, "Go": "package main\n\nimport \"fmt\"\n\nfunc isPrime(n int) bool {\n    if n == 1 {\n        return false\n    }\n    i := 2\n    for i*i <= n {\n        if n%i == 0 {\n            return false\n        }\n        i++\n    }\n    return true\n}\n\nfunc main() {\n    var final, pNum int\n\n    for i := 1; pNum < 10001; i++ {\n        if isPrime(i) {\n            pNum++\n        }\n        final = i\n    }\n    fmt.Println(final)\n}\n", "Python": "def isPrime(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False        \n    return True\n\ndef prime(n: int) -> int:\n    if n == 1:\n        return 2\n    p = 3\n    pn = 1\n    while pn < n:\n        if isPrime(p):\n            pn += 1\n        p += 2\n    return p-2\n\nif __name__ == '__main__':\n    print(prime(10001))\n", "Python_gpt": "Python:\n\ndef isPrime(n):\n    if n == 1:\n        return False\n    i = 2\n    while i*i <= n:\n        if n%i == 0:\n            return False\n        i += 1\n    return True\n\ndef main():\n    final, pNum = 0, 0\n    i = 1\n    while pNum < 10001:\n        if isPrime(i):\n            pNum += 1\n        final = i\n        i += 1\n    print(final)\n\nif __name__ == '__main__':\n    main()"}
{"id": 861, "Go": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    fs := make([]func() int, 10)\n    for i := range fs {\n        i := i\n        fs[i] = func() int {\n            return i * i\n        }\n    }\n    fmt.Println(\"func #0:\", fs[0]())\n    fmt.Println(\"func #3:\", fs[3]())\n}\n", "Java": "import java.util.function.Supplier;\nimport java.util.ArrayList;\n\npublic class ValueCapture {\n    public static void main(String[] args) {\n\tArrayList<Supplier<Integer>> funcs = new ArrayList<>();\n\tfor (int i = 0; i < 10; i++) {\n\t    int j = i;\n\t    funcs.add(() -> j * j);\n\t}\n\n\tSupplier<Integer> foo = funcs.get(3);\n\tSystem.out.println(foo.get()); \n    }\n}\n", "Java_gpt": "Java:\n\nimport java.util.function.*;\n\npublic class Main {\n    public static void main(String[] args) {\n        IntUnaryOperator[] fs = new IntUnaryOperator[10];\n        for (int i = 0; i < fs.length; i++) {\n            final int j = i;\n            fs[i] = () -> j * j;\n        }\n        System.out.println(\"func #0: \" + fs[0].applyAsInt(0));\n        System.out.println(\"func #3: \" + fs[3].applyAsInt(0));\n    }\n}"}
{"id": 1403, "Go": "package main\n\nimport (\n    \"fmt\"\n    \"rcu\"\n)\n\nfunc main() {\n    primes := rcu.Primes(79) \n    ix := 0\n    n := 1\n    count := 0\n    var pi []int\n    for {\n        if primes[ix] <= n {\n            count++\n            if count == 22 {\n                break\n            }\n            ix++\n        }\n        n++\n        pi = append(pi, count)\n    }\n    fmt.Println(\"pi(n), the number of primes <= n, where n >= 1 and pi(n) < 22:\")\n    for i, n := range pi {\n        fmt.Printf(\"%2d \", n)\n        if (i+1)%10 == 0 {\n            fmt.Println()\n        }\n    }\n    fmt.Printf(\"\\n\\nHighest n for this range = %d.\\n\", len(pi))\n}\n", "C": "#include <stdio.h>\n#include <stdlib.h>\n\nint isprime( int n ) {\n\tint i;\n        if (n<2) return 0;\n\tfor(i=2; i*i<=n; i++) {\n\t\tif (n % i == 0) {return 0;}\n\t}\n\treturn 1;\n}\n\nint main(void)  {\n\tint n = 0, p = 1;\n\twhile (n<22) {\n\t\tprintf( \"%d   \", n );\n\t\tp++;\n\t\tif (isprime(p)) n+=1;\n        }\n\treturn 0;\n}\n", "C_gpt": "C: #include <stdio.h>\n#include \"rcu.h\"\n\nint main() {\n    int primes[79];\n    rcu_primes(primes, 79);\n    int ix = 0;\n    int n = 1;\n    int count = 0;\n    int pi[100];\n    for (;;) {\n        if (primes[ix] <= n) {\n            count++;\n            if (count == 22) {\n                break;\n            }\n            ix++;\n        }\n        n++;\n        pi[n-2] = count;\n    }\n    printf(\"pi(n), the number of primes <= n, where n >= 1 and pi(n) < 22:\\n\");\n    for (int i = 0; i < n-1; i++) {\n        printf(\"%2d \", pi[i]);\n        if ((i+1)%10 == 0) {\n            printf(\"\\n\");\n        }\n    }\n    printf(\"\\n\\nHighest n for this range = %d.\\n\", n-1);\n    return 0;\n}"}
{"id": 744, "Go": "package main\n\n\n\nimport \"C\"\nimport \"unsafe\"\n\nfunc main() {\n    C.Run()\n}\n\nconst msg = \"Here am I\"\n\n\nfunc Query(cbuf *C.char, csiz *C.size_t) C.int {\n    if int(*csiz) <= len(msg) {\n        return 0\n    }\n    pbuf := uintptr(unsafe.Pointer(cbuf))\n    for i := 0; i < len(msg); i++ {\n        *((*byte)(unsafe.Pointer(pbuf))) = msg[i]\n        pbuf++\n    }\n    *((*byte)(unsafe.Pointer(pbuf))) = 0\n    *csiz = C.size_t(len(msg) + 1)\n    return 1\n}\n", "C++": "#include <string>\nusing std::string;\n\n\nextern \"C\" int\nQuery (char *Data, size_t *Length)\n{\n   const string Message = \"Here am I\";\n\n   \n   if (*Length < Message.length())\n      return false;  \n\n   *Length = Message.length();\n   Message.copy(Data, *Length);\n   return true;\n}\n", "C++_gpt": "#include <iostream>\n#include <cstring>\n\nextern \"C\" {\n    void Run();\n    int Query(char* cbuf, size_t* csiz);\n}\n\nconst char* msg = \"Here am I\";\n\nvoid Run() {\n    char cbuf[100];\n    size_t csiz = sizeof(cbuf);\n    int result = Query(cbuf, &csiz);\n    if (result == 1) {\n        std::cout << \"Query successful. Message: \" << cbuf << std::endl;\n    } else {\n        std::cout << \"Query failed.\" << std::endl;\n    }\n}\n\nint Query(char* cbuf, size_t* csiz) {\n    if (*csiz <= strlen(msg)) {\n        return 0;\n    }\n    char* pbuf = cbuf;\n    for (int i = 0; i < strlen(msg); i++) {\n        *pbuf = msg[i];\n        pbuf++;\n    }\n    *pbuf = '\\0';\n    *csiz = strlen(msg) + 1;\n    return 1;\n}\n\nint main() {\n    Run();\n    return 0;\n}"}
{"id": 52, "Go": "package main\n\nimport \"time\"\nimport \"fmt\"\n\nfunc main() {\n    fmt.Print(\"Enter number of seconds to sleep: \")\n    var sec float64\n    fmt.Scanf(\"%f\", &sec)\n    fmt.Print(\"Sleepingâ¦\")\n    time.Sleep(time.Duration(sec * float64(time.Second)))\n    fmt.Println(\"\\nAwake!\")\n}\n", "C#": "using System;\nusing System.Threading;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        int sleep = Convert.ToInt32(Console.ReadLine());\n        Console.WriteLine(\"Sleeping...\");\n        Thread.Sleep(sleep); \n        Console.WriteLine(\"Awake!\");\n    }\n}\n", "C#_gpt": "C#:\n\nusing System;\n\nnamespace SleepProgram\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.Write(\"Enter number of seconds to sleep: \");\n            double sec;\n            double.TryParse(Console.ReadLine(), out sec);\n            Console.Write(\"Sleeping...\");\n            System.Threading.Thread.Sleep((int)(sec * 1000));\n            Console.WriteLine(\"\\nAwake!\");\n        }\n    }\n}"}
{"id": 428, "Go": "package main\n\nimport \"fmt\"\n\ntype vector struct {\n    x, y, z float64\n}\n\nvar (\n    a = vector{3, 4, 5}\n    b = vector{4, 3, 5}\n    c = vector{-5, -12, -13}\n)\n\nfunc dot(a, b vector) float64 {\n    return a.x*b.x + a.y*b.y + a.z*b.z\n}\n\nfunc cross(a, b vector) vector {\n    return vector{a.y*b.z - a.z*b.y, a.z*b.x - a.x*b.z, a.x*b.y - a.y*b.x}\n}\n\nfunc s3(a, b, c vector) float64 {\n    return dot(a, cross(b, c))\n}\n\nfunc v3(a, b, c vector) vector {\n    return cross(a, cross(b, c))\n}\n\nfunc main() {\n    fmt.Println(dot(a, b))\n    fmt.Println(cross(a, b))\n    fmt.Println(s3(a, b, c))\n    fmt.Println(v3(a, b, c))\n}\n", "VB": "Option Base 1\nFunction dot_product(a As Variant, b As Variant) As Variant\n    dot_product = WorksheetFunction.SumProduct(a, b)\nEnd Function\n \nFunction cross_product(a As Variant, b As Variant) As Variant\n    cross_product = Array(a(2) * b(3) - a(3) * b(2), a(3) * b(1) - a(1) * b(3), a(1) * b(2) - a(2) * b(1))\nEnd Function\n \nFunction scalar_triple_product(a As Variant, b As Variant, c As Variant) As Variant\n    scalar_triple_product = dot_product(a, cross_product(b, c))\nEnd Function\n \nFunction vector_triple_product(a As Variant, b As Variant, c As Variant) As Variant\n    vector_triple_product = cross_product(a, cross_product(b, c))\nEnd Function\n \nPublic Sub main()\n    a = [{3, 4, 5}]\n    b = [{4, 3, 5}]\n    c = [{-5, -12, -13}]\n    Debug.Print \"      a . b = \"; dot_product(a, b)\n    Debug.Print \"      a x b = \"; \"(\"; Join(cross_product(a, b), \", \"); \")\"\n    Debug.Print \"a . (b x c) = \"; scalar_triple_product(a, b, c)\n    Debug.Print \"a x (b x c) = \"; \"(\"; Join(vector_triple_product(a, b, c), \", \"); \")\"\nEnd Sub\n", "VB_gpt": "Unfortunately, it is not possible to translate Go to VB using the given example of Java to Python. The reason is that Java and Python are both high-level programming languages, while Go and VB are different in terms of syntax and structure. Therefore, a direct translation is not possible and would require a complete rewrite of the code."}
{"id": 286, "C#": "class Link\n{\n    public int Item { get; set; }\n    public Link Prev { get; set; }\n    public Link Next { get; set; }\n\n    \n    public Link(int item, Link prev = null, Link next = null) {\n        Item = item;\n        Prev = prev;\n        Next = next;\n    }\n}\n", "Python": "class Node(object):\n     def __init__(self, data = None, prev = None, next = None):\n         self.prev = prev\n         self.next = next\n         self.data = data\n     def __str__(self):\n         return str(self.data)\n     def __repr__(self):\n         return repr(self.data)\n     def iter_forward(self):\n         c = self\n         while c != None:\n             yield c\n             c = c.next\n     def iter_backward(self):\n         c = self\n         while c != None:\n             yield c\n             c = c.prev\n", "Python_gpt": "class Link:\n    def __init__(self, item, prev=None, next=None):\n        self.Item = item\n        self.Prev = prev\n        self.Next = next"}
{"id": 704, "C#": "Func<char, int> toInt = c => c-'0';\n\nforeach (var i in Enumerable.Range(1,5000)\n\t.Where(n => n == n.ToString()\n\t\t.Sum(x => Math.Pow(toInt(x), toInt(x)))))\n\tConsole.WriteLine(i);\n", "Java": "public class Main {\n    public static void main(String[] args) {\n        for(int i = 0 ; i <= 5000 ; i++ ){\n            int val = String.valueOf(i).chars().map(x -> (int) Math.pow( x-48 ,x-48)).sum();\n            if( i == val){\n                System.out.println( i + \" (munchausen)\");\n            }\n        }\n    }\n}\n", "Java_gpt": "Java: \nimport java.util.function.Function;\nimport java.util.stream.IntStream;\n\npublic class NumberPower {\n\n    public static void main(String[] args) {\n        Function<Character, Integer> toInt = c -> c - '0';\n        IntStream.rangeClosed(1, 5000)\n                .filter(n -> n == String.valueOf(n)\n                        .chars()\n                        .map(x -> (int) Math.pow(toInt.apply((char) x), toInt.apply((char) x)))\n                        .sum())\n                .forEach(System.out::println);\n    }\n}\n\nNote: Java 8 streams are used to replicate the functionality of C# LINQ. The lambda expression is used to define the toInt function. The rangeClosed method is used to generate a stream of integers from 1 to 5000. The filter method is used to filter out the numbers that do not satisfy the given condition. The map method is used to apply the power function to each digit of the number. The sum method is used to add up the results of the map operation. Finally, the forEach method is used to print out the numbers that satisfy the condition."}
{"id": 966, "C#": "using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    static void Main()\n    {\n        foreach (var date in PalindromicDates(2021).Take(15)) WriteLine(date.ToString(\"yyyy-MM-dd\"));\n    }\n\n    public static IEnumerable<DateTime> PalindromicDates(int startYear) {\n        for (int y = startYear; ; y++) {\n            int m = Reverse(y % 100);\n            int d = Reverse(y / 100);\n            if (IsValidDate(y, m, d, out var date)) yield return date;\n        }\n\n        int Reverse(int x) => x % 10 * 10 + x / 10;\n        bool IsValidDate(int y, int m, int d, out DateTime date) => DateTime.TryParse($\"{y}-{m}-{d}\", out date);\n    }\n}\n", "C": "#include <stdbool.h>\n#include <stdio.h>\n#include <string.h>\n#include <time.h>\n\nbool is_palindrome(const char* str) {\n    size_t n = strlen(str);\n    for (size_t i = 0; i + 1 < n; ++i, --n) {\n        if (str[i] != str[n - 1])\n            return false;\n    }\n    return true;\n}\n\nint main() {\n    time_t timestamp = time(0);\n    const int seconds_per_day = 24*60*60;\n    int count = 15;\n    char str[32];\n    printf(\"Next %d palindrome dates:\\n\", count);\n    for (; count > 0; timestamp += seconds_per_day) {\n        struct tm* ptr = gmtime(&timestamp);\n        strftime(str, sizeof(str), \"%Y%m%d\", ptr);\n        if (is_palindrome(str)) {\n            strftime(str, sizeof(str), \"%F\", ptr);\n            printf(\"%s\\n\", str);\n            --count;\n        }\n    }\n    return 0;\n}\n", "C_gpt": "#include <stdio.h>\n#include <stdlib.h>\n\nint reverse(int x) {\n    return x % 10 * 10 + x / 10;\n}\n\nint is_valid_date(int y, int m, int d, struct tm *date) {\n    char date_str[11];\n    sprintf(date_str, \"%d-%02d-%02d\", y, m, d);\n    return strptime(date_str, \"%Y-%m-%d\", date) != NULL;\n}\n\nint main() {\n    int start_year = 2021;\n    struct tm date;\n    int y, m, d;\n    for (y = start_year;; y++) {\n        m = reverse(y % 100);\n        d = reverse(y / 100);\n        if (is_valid_date(y, m, d, &date)) {\n            char date_str[11];\n            strftime(date_str, sizeof(date_str), \"%Y-%m-%d\", &date);\n            printf(\"%s\\n\", date_str);\n        }\n        if (y - start_year >= 15) {\n            break;\n        }\n    }\n    return 0;\n}"}
{"id": 116, "C#": "using System;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        int a = Convert.ToInt32(args[0]);\n        int b = Convert.ToInt32(args[1]);\n\n        Console.WriteLine(\"{0} + {1} = {2}\", a, b, a + b);\n        Console.WriteLine(\"{0} - {1} = {2}\", a, b, a - b);\n        Console.WriteLine(\"{0} * {1} = {2}\", a, b, a * b);\n        Console.WriteLine(\"{0} / {1} = {2}\", a, b, a / b); \n        Console.WriteLine(\"{0}Â % {1} = {2}\", a, b, a % b); \n        Console.WriteLine(\"{0} to the power of {1} = {2}\", a, b, Math.Pow(a, b));\n    }\n}\n", "C++": "#include <iostream>\n\nint main()\n{\n  int a, b;\n  std::cin >> a >> b;\n  std::cout << \"a+b = \" << a+b << \"\\n\";\n  std::cout << \"a-b = \" << a-b << \"\\n\";\n  std::cout << \"a*b = \" << a*b << \"\\n\";\n  std::cout << \"a/b = \" << a/b << \", remainder \" << a%b << \"\\n\";\n  return 0;\n}\n", "C++_gpt": "#include <iostream>\n#include <cstdlib>\n#include <cmath>\n\nusing namespace std;\n\nint main(int argc, char* argv[]) {\n    int a = atoi(argv[1]);\n    int b = atoi(argv[2]);\n\n    cout << a << \" + \" << b << \" = \" << a + b << endl;\n    cout << a << \" - \" << b << \" = \" << a - b << endl;\n    cout << a << \" * \" << b << \" = \" << a * b << endl;\n    cout << a << \" / \" << b << \" = \" << a / b << endl;\n    cout << a << \" % \" << b << \" = \" << a % b << endl;\n    cout << a << \" to the power of \" << b << \" = \" << pow(a, b) << endl;\n\n    return 0;\n}"}
{"id": 931, "C#": "using System;\nusing System.Linq;\n\nstatic class Program\n{\n    static bool IsPangram(this string text, string alphabet = \"abcdefghijklmnopqrstuvwxyz\")\n    {\n        return alphabet.All(text.ToLower().Contains);\n    }\n\n    static void Main(string[] arguments)\n    {\n        Console.WriteLine(arguments.Any() && arguments.First().IsPangram());\n    }\n}\n", "Go": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    for _, s := range []string{\n        \"The quick brown fox jumps over the lazy dog.\",\n        `Watch \"Jeopardy!\", Alex Trebek's fun TV quiz game.`,\n        \"Not a pangram.\",\n    } {\n        if pangram(s) {\n            fmt.Println(\"Yes:\", s)\n        } else {\n            fmt.Println(\"No: \", s)\n        }\n    }\n}\n\nfunc pangram(s string) bool {\n\tvar missing uint32 = (1 << 26) - 1\n\tfor _, c := range s {\n\t\tvar index uint32\n\t\tif 'a' <= c && c <= 'z' {\n\t\t\tindex = uint32(c - 'a')\n\t\t} else if 'A' <= c && c <= 'Z' {\n\t\t\tindex = uint32(c - 'A')\n\t\t} else {\n\t\t\tcontinue\n\t\t}\n\n\t\tmissing &^= 1 << index\n\t\tif missing == 0 {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n", "Go_gpt": "package main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc isPangram(text string, alphabet string) bool {\n\tfor _, letter := range alphabet {\n\t\tif !strings.Contains(strings.ToLower(text), string(letter)) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc main() {\n\tif len(os.Args) > 1 && isPangram(os.Args[1], \"abcdefghijklmnopqrstuvwxyz\") {\n\t\tfmt.Println(true)\n\t} else {\n\t\tfmt.Println(false)\n\t}\n}"}
{"id": 301, "C#": "using System;\nusing System.Diagnostics;\n\nnamespace sons\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            for (int i = 1; i < 23; i++)            \n                Console.WriteLine(nonsqr(i));            \n\n            for (int i = 1; i < 1000000; i++)\n            {\n                double j = Math.Sqrt(nonsqr(i));\n                Debug.Assert(j != Math.Floor(j),\"Square\");\n            }            \n        }\n\n        static int nonsqr(int i)\n        {\n            return (int)(i + Math.Floor(0.5 + Math.Sqrt(i)));\n        }\n    }\n}\n", "VB": "Sub Main()\nDim i&, c&, j#, s$\nConst N& = 1000000\n   s = \"values for n in the range 1 to 22Â : \"\n   For i = 1 To 22\n      s = s & ns(i) & \", \"\n   Next\n   For i = 1 To N\n      j = Sqr(ns(i))\n      If j = CInt(j) Then c = c + 1\n   Next\n   \n   Debug.Print s\n   Debug.Print c & \" squares less than \" & N\nEnd Sub\n\nPrivate Function ns(l As Long) As Long\n   ns = l + Int(1 / 2 + Sqr(l))\nEnd Function\n", "VB_gpt": "Imports System\nImports System.Diagnostics\n\nNamespace sons\n    Class Program\n        Shared Sub Main(ByVal args As String())\n            For i As Integer = 1 To 22\n                Console.WriteLine(nonsqr(i))\n            Next\n\n            For i As Integer = 1 To 999999\n                Dim j As Double = Math.Sqrt(nonsqr(i))\n                Debug.Assert(j <> Math.Floor(j), \"Square\")\n            Next\n        End Sub\n\n        Shared Function nonsqr(ByVal i As Integer) As Integer\n            Return CInt(i + Math.Floor(0.5 + Math.Sqrt(i)))\n        End Function\n    End Class\nEnd Namespace"}
{"id": 778, "VB": "Const n = 2200\nPublic Sub pq()\n    Dim s As Long, s1 As Long, s2 As Long, x As Long, x2 As Long, y As Long: s = 3\n    Dim l(n) As Boolean, l_add(9680000) As Boolean \n    For x = 1 To n\n        x2 = x * x\n        For y = x To n\n            l_add(x2 + y * y) = True\n        Next y\n    Next x\n    For x = 1 To n\n        s1 = s\n        s = s + 2\n        s2 = s\n        For y = x + 1 To n\n            If l_add(s1) Then l(y) = True\n            s1 = s1 + s2\n            s2 = s2 + 2\n        Next\n    Next\n    For x = 1 To n\n        If Not l(x) Then Debug.Print x;\n    Next\n    Debug.Print\nEnd Sub\n", "Python": "def quad(top=2200):\n    r = [False] * top\n    ab = [False] * (top * 2)**2\n    for a in range(1, top):\n        for b in range(a, top):\n            ab[a * a + b * b] = True\n    s = 3\n    for c in range(1, top):\n        s1, s, s2 = s, s + 2, s + 2\n        for d in range(c + 1, top):\n            if ab[s1]:\n                r[d] = True\n            s1 += s2\n            s2 += 2\n    return [i for i, val in enumerate(r) if not val and i]\n    \nif __name__ == '__main__':\n    n = 2200\n    print(f\"Those values of d in 1..{n} that can't be represented: {quad(n)}\")\n", "Python_gpt": "n = 2200\n\ndef pq():\n    s = 3\n    l = [False] * (n+1)\n    l_add = [False] * 9680000\n    for x in range(1, n+1):\n        x2 = x * x\n        for y in range(x, n+1):\n            l_add[x2 + y * y] = True\n    for x in range(1, n+1):\n        s1 = s\n        s = s + 2\n        s2 = s\n        for y in range(x+1, n+1):\n            if l_add[s1]:\n                l[y] = True\n            s1 = s1 + s2\n            s2 = s2 + 2\n    for x in range(1, n+1):\n        if not l[x]:\n            print(x, end=' ')\n    print()"}
{"id": 122, "VB": "Sub sierpinski(n As Integer)\n    Dim lim As Integer: lim = 2 ^ n - 1\n    For y = lim To 0 Step -1\n        Debug.Print String$(y, \" \")\n        For x = 0 To lim - y\n            Debug.Print IIf(x And y, \"  \", \"# \");\n        Next\n        Debug.Print\n    Next y\nEnd Sub\nPublic Sub main()\n    Dim i As Integer\n    For i = 1 To 5\n        sierpinski i\n    Next i\nEnd Sub\n", "Java": "public class SierpinskiTriangle {\n\n    public static void main(String[] args) {\n        System.out.println(getSierpinskiTriangle(4));\n    }\n    \n    private static final String getSierpinskiTriangle(int n) {\n        if ( n == 0 ) {\n            return \"*\";\n        }\n\n        String s = getSierpinskiTriangle(n-1);\n        String [] split = s.split(\"\\n\");\n        int length = split.length;\n\n        \n        StringBuilder sb = new StringBuilder();\n        String top = buildSpace((int)Math.pow(2, n-1));\n        for ( int i = 0 ; i < length ;i++ ) {\n            sb.append(top);\n            sb.append(split[i]);\n            sb.append(\"\\n\");\n        }\n        \n        \n        for ( int i = 0 ; i < length ;i++ ) {\n            sb.append(split[i]);\n            sb.append(buildSpace(length-i));\n            sb.append(split[i]);\n            sb.append(\"\\n\");\n        }\n        return sb.toString();\n    }\n    \n    private static String buildSpace(int n) {\n        StringBuilder sb = new StringBuilder();\n        while ( n > 0 ) {\n            sb.append(\" \");\n            n--;\n        }\n        return sb.toString();\n    }\n    \n}\n", "Java_gpt": "public class Sierpinski {\n    public static void main(String[] args) {\n        for (int i = 1; i <= 5; i++) {\n            sierpinski(i);\n        }\n    }\n\n    private static void sierpinski(int n) {\n        int lim = (int) Math.pow(2, n) - 1;\n        for (int y = lim; y >= 0; y--) {\n            System.out.print(new String(new char[y]).replace(\"\\0\", \" \"));\n            for (int x = 0; x <= lim - y; x++) {\n                System.out.print((x & y) != 0 ? \"  \" : \"# \");\n            }\n            System.out.println();\n        }\n    }\n}"}
{"id": 689, "VB": "Function IsSelfDescribing(n)\n\tIsSelfDescribing = False\n\tSet digit = CreateObject(\"Scripting.Dictionary\")\n\tFor i = 1 To Len(n)\n\t\tk = Mid(n,i,1)\n\t\tIf digit.Exists(k) Then\n\t\t\tdigit.Item(k) = digit.Item(k) + 1\n\t\tElse\n\t\t\tdigit.Add k,1\n\t\tEnd If\t\n\tNext\n\tc = 0\n\tFor j = 0 To Len(n)-1\n\t\tl = Mid(n,j+1,1)\n\t\tIf digit.Exists(CStr(j)) Then\n\t\t\tIf digit.Item(CStr(j)) = CInt(l) Then\n\t\t\t\tc = c + 1\n\t\t\tEnd If\n\t\tElseIf l = 0 Then\n\t\t\tc = c + 1\n\t\tElse\n\t\t\tExit For\n\t\tEnd If\n\tNext\n\tIf c = Len(n) Then\n\t\tIsSelfDescribing = True\n\tEnd If\nEnd Function\n\n\nstart_time = Now\ns = \"\"\nFor m = 1 To 100000000\n\tIf \tIsSelfDescribing(m) Then\n\t\tWScript.StdOut.WriteLine m\n\tEnd If\nNext\nend_time = Now\nWScript.StdOut.WriteLine \"Elapse Time: \" & DateDiff(\"s\",start_time,end_time) & \" seconds\"\n", "C": "#include <stdio.h>\n\ninline int self_desc(unsigned long long xx)\n{\n\tregister unsigned int d, x;\n\tunsigned char cnt[10] = {0}, dig[10] = {0};\n \n\tfor (d = 0; xx > ~0U; xx /= 10)\n\t\tcnt[ dig[d++] = xx % 10 ]++;\n \n\tfor (x = xx; x; x /= 10)\n\t\tcnt[ dig[d++] = x % 10 ]++;\n \n\twhile(d-- && dig[x++] == cnt[d]);\n \n\treturn d == -1;\n}\n \nint main()\n{\n\tint i;\n\tfor (i = 1; i < 100000000; i++) \n\t\tif (self_desc(i)) printf(\"%d\\n\", i);\n \n\treturn 0;\n}\n", "C_gpt": "bool IsSelfDescribing(int n) {\n    bool isSelfDescribing = false;\n    unordered_map<int, int> digit;\n    string str = to_string(n);\n    for (int i = 0; i < str.length(); i++) {\n        int k = str[i] - '0';\n        if (digit.find(k) != digit.end()) {\n            digit[k]++;\n        } else {\n            digit[k] = 1;\n        }\n    }\n    int c = 0;\n    for (int j = 0; j < str.length(); j++) {\n        int l = str[j] - '0';\n        if (digit.find(j) != digit.end()) {\n            if (digit[j] == l) {\n                c++;\n            }\n        } else if (l == 0) {\n            c++;\n        } else {\n            break;\n        }\n    }\n    if (c == str.length()) {\n        isSelfDescribing = true;\n    }\n    return isSelfDescribing;\n}\n\nint main() {\n    time_t start_time = time(NULL);\n    for (int m = 1; m <= 100000000; m++) {\n        if (IsSelfDescribing(m)) {\n            cout << m << endl;\n        }\n    }\n    time_t end_time = time(NULL);\n    cout << \"Elapse Time: \" << difftime(end_time, start_time) << \" seconds\" << endl;\n    return 0;\n}"}
{"id": 18, "VB": "Private Function sum(i As String, ByVal lo As Integer, ByVal hi As Integer, term As String) As Double\n    Dim temp As Double\n    For k = lo To hi\n        temp = temp + Evaluate(Replace(term, i, k))\n    Next k\n    sum = temp\nEnd Function\nSub Jensen_Device()\n    Debug.Print sum(\"i\", 1, 100, \"1/i\")\n    Debug.Print sum(\"i\", 1, 100, \"i*i\")\n    Debug.Print sum(\"j\", 1, 100, \"sin(j)\")\nEnd Sub\n", "C++": "#include <iostream>\n\n#define SUM(i,lo,hi,term)\\\n[&](const int _lo,const int _hi){\\\n  decltype(+(term)) sum{};\\\n  for (i = _lo; i <= _hi; ++i) sum += (term);\\\n  return sum;\\\n}((lo),(hi))\n\nint i;\ndouble sum(int &i, int lo, int hi, double (*term)()) {\n    double temp = 0;\n    for (i = lo; i <= hi; i++)\n        temp += term();\n    return temp;\n}\ndouble term_func() { return 1.0 / i; }\n\nint main () {\n    std::cout << sum(i, 1, 100, term_func) << std::endl;\n    std::cout << SUM(i,1,100,1.0/i) << \"\\n\";\n    return 0;\n}\n", "C++_gpt": "C++:\n\n#include <iostream>\n#include <string>\n#include <cmath>\n\nusing namespace std;\n\ndouble sum(string i, int lo, int hi, string term) {\n    double temp = 0;\n    for (int k = lo; k <= hi; k++) {\n        temp += eval(term.replace(term.find(i), i.length(), to_string(k)));\n    }\n    return temp;\n}\n\ndouble eval(string expr) {\n    // Evaluate the expression using a library or custom code\n}\n\nvoid Jensen_Device() {\n    cout << sum(\"i\", 1, 100, \"1/i\") << endl;\n    cout << sum(\"i\", 1, 100, \"i*i\") << endl;\n    cout << sum(\"j\", 1, 100, \"sin(j)\") << endl;\n}\n\nint main() {\n    Jensen_Device();\n    return 0;\n}"}
{"id": 554, "VB": "Const Order = 4\n\nFunction InCarpet(ByVal x As Integer, ByVal y As Integer)\n    Do While x <> 0 And y <> 0\n        If x Mod 3 = 1 And y Mod 3 = 1 Then\n            InCarpet = \" \"\n            Exit Function\n        End If\n        x = x \\ 3\n        y = y \\ 3\n    Loop\n    InCarpet = \"#\"\nEnd Function\n \nPublic Sub sierpinski_carpet()\n    Dim i As Integer, j As Integer\n    For i = 0 To 3 ^ Order - 1\n        For j = 0 To 3 ^ Order - 1\n            Debug.Print InCarpet(i, j);\n        Next j\n        Debug.Print\n    Next i\nEnd Sub\n", "Go": "package main\n\nimport (\n    \"fmt\"\n    \"strings\"\n    \"unicode/utf8\"\n)\n\nvar order = 3\nvar grain = \"#\"\n\nfunc main() {\n    carpet := []string{grain}\n    for ; order > 0; order-- {\n        \n        \n        hole := strings.Repeat(\" \", utf8.RuneCountInString(carpet[0]))\n        middle := make([]string, len(carpet))\n        for i, s := range carpet {\n            middle[i] = s + hole + s\n            carpet[i] = strings.Repeat(s, 3)\n        }\n        carpet = append(append(carpet, middle...), carpet...)\n    }\n    for _, r := range carpet {\n        fmt.Println(r)\n    }\n}\n", "Go_gpt": "package main\n\nimport (\n\t\"fmt\"\n)\n\nconst Order = 4\n\nfunc InCarpet(x int, y int) string {\n\tfor x != 0 && y != 0 {\n\t\tif x%3 == 1 && y%3 == 1 {\n\t\t\treturn \" \"\n\t\t}\n\t\tx = x / 3\n\t\ty = y / 3\n\t}\n\treturn \"#\"\n}\n\nfunc sierpinski_carpet() {\n\tfor i := 0; i <= (3^Order)-1; i++ {\n\t\tfor j := 0; j <= (3^Order)-1; j++ {\n\t\t\tfmt.Print(InCarpet(i, j))\n\t\t}\n\t\tfmt.Println()\n\t}\n}\n\nfunc main() {\n\tsierpinski_carpet()\n}"}
{"id": 253, "VB": "Private Function root_mean_square(s() As Variant) As Double\n    For i = 1 To UBound(s)\n        s(i) = s(i) ^ 2\n    Next i\n    root_mean_square = Sqr(WorksheetFunction.sum(s) / UBound(s))\nEnd Function\nPublic Sub pythagorean_means()\n    Dim s() As Variant\n    s = [{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}]\n    Debug.Print root_mean_square(s)\nEnd Sub\n", "C#": "using System;\n\nnamespace rms\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int[] x = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n            Console.WriteLine(rootMeanSquare(x));\n        }\n\n        private static double rootMeanSquare(int[] x)\n        {            \n            double sum = 0;\n            for (int i = 0; i < x.Length; i++)\n            {\n                sum += (x[i]*x[i]);\n            }\n            return Math.Sqrt(sum / x.Length);\n        }\n    }\n}\n", "C#_gpt": "C#: \nusing System;\nusing Microsoft.Office.Interop.Excel;\n\npublic class Program\n{\n    public static void Main()\n    {\n        double[] s = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n        Console.WriteLine(root_mean_square(s));\n    }\n\n    private static double root_mean_square(double[] s)\n    {\n        for (int i = 0; i < s.Length; i++)\n        {\n            s[i] = Math.Pow(s[i], 2);\n        }\n        return Math.Sqrt(Application.WorksheetFunction.Sum(s) / (s.Length - 1));\n    }\n}"}
